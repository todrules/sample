@import "../../styles/imports";
/**
*	Variables
**/
$button-height: 45px;
$button-horiz-padding: 0.75rem;
$button-vert-padding: 0.375rem;
$border-radius: 2px;
/**
*	Mixins
**/
@mixin button-text() {
	
	font-family: $font-family-base;
	line-height: calc(var(--line-height) * 1.25);
	font-size: calc(var(--font-size));
	font-weight: var(--font-weight);
	letter-spacing: 0.04em;
	margin: inherit;
	text-decoration: none;
	text-transform: none;

}

@mixin button-colors() {
	
	button {
		background-color: rgba($text-color, 0.15);
		color: $text-color;
	}
	
	@each $key, $value in $colors {
		
		button[raised][color="#{$key}"] {
			background-color: $value;
		//	@include bg-gradient(color-shade($value, -0.1), $value);
			color: contrastinator($value, $dark, $light);
			border: 1px solid transparent;
			&:focus {
				box-shadow: 1px 1px 0 0.5em rgba($value, 0.5) -1px -1px 0 0.5em rgba($value, 0.5);
			}
			&:active {
				box-shadow: 1px 1px 0 0.5em rgba($value, 0.5) -1px -1px 0 0.5em rgba($value, 0.5);
			}
		}
		
		button[raised][contrast="#{$key}"] {
			background-color: contrastinator($value, $dark, $light);
			color: $value;
			
			
			&:focus {
				box-shadow: 0 0 0 0.2rem rgba(contrastinator($value, $dark, $light), 0.25);
			}
			
		}
		
		button[outline][color="#{$key}"] {
			background-color: transparent;
			border: 1px solid $value;
			color: $value;
			
			
			&:focus {
				box-shadow: 0 0 0 0.2rem rgba($value, 0.5);
			}
			
			&:disabled {
				border: 1px solid rgba($value, 0.5);
				color: rgba($value, 0.5);
			}
			
			&:hover {
				color: rgba($value, 0.5);
				border-color: rgba($value, 0.5);
			}
		}
		
		button[color="#{$key}"] {
			background-color: rgba($value, 0.15);
			color: $value;
			
			
			&:focus {
				box-shadow: 0 0 0 0.2rem rgba($value, 0.25);
			}
			
		}
		
	}
	
}
/**
*	Styles
**/
button {
	
	@include button-text();
	
	min-width: 5vw;
	display: inline-block;
	position: relative;
	box-sizing: border-box;
	height: $button-height;
	border: 1px solid transparent;
	outline: none;
	text-align: center;
	white-space: nowrap;
	user-select: none;
	-webkit-appearance: none;
	overflow: hidden;
	vertical-align: middle;
	border-radius: $border-radius;
	margin: 0.25vmin;
	// box-shadow: inset 0 1px 0 rgba($light, .15), 0 1px 1px rgba($dark, .075);
	padding: $button-vert-padding $button-horiz-padding;
	transition: color .15s ease-in-out, background-color .15s ease-in-out, border-color .15s ease-in-out, box-shadow .15s ease-in-out;
	filter: brightness(120%);
	
	&:active {
		outline: none !important;
		filter: brightness(100%);
	}
	
	&:focus {
		text-decoration: none;
		outline: none !important;
		filter: brightness(100%);
	}
	
	&:hover {
		text-decoration: none;
		cursor: pointer;
		filter: brightness(100%);
	}
	
	&::-moz-focus-inner {
		padding: 0;
		border: 0;
	}
	
	&:disabled {
		color: rgba($text-color, 0.5);
		filter: opacity(0.7) saturate(30%) grayscale(80%);
		box-shadow: none;
		cursor: default;
		pointer-events: none;
	}
	
	&:not(:disabled):not(.disabled) {
		cursor: pointer;
	}
	
	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		background-image: none;
		box-shadow: inset 0 3px 5px rgba($dark, 0.125);
		
		&:focus {
			box-shadow: inset 0 1px 0 rgba($light, .15), 0 1px 1px rgba($dark, .075) inset 0 3px 5px rgba($dark, 0.125);
		}
	}
	
}


@include button-colors();

button[raised] {
	
	&:disabled {
		filter: opacity(0.5) saturate(20%) grayscale(50%);
		box-shadow: none;
		cursor: default;
		pointer-events: none;
	}
	
}
